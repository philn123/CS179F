diff --git a/kernel/file.c b/kernel/file.c
index e8dcf17..00579b7 100644
--- a/kernel/file.c
+++ b/kernel/file.c
@@ -16,7 +16,7 @@
 struct devsw devsw[NDEV];
 struct {
   struct spinlock lock;
-  struct file file[NFILE];
+
 } ftable;
 
 void
@@ -29,18 +29,17 @@ fileinit(void)
 struct file*
 filealloc(void)
 {
-  struct file *f;
-
   acquire(&ftable.lock);
-  for(f = ftable.file; f < ftable.file + NFILE; f++){
-    if(f->ref == 0){
-      f->ref = 1;
-      release(&ftable.lock);
-      return f;
-    }
+  struct file *p = bd_malloc(sizeof(struct file));
+
+  if(p == 0){
+    release(&ftable.lock);
+    return 0;
   }
+  memset(p,0,sizeof(struct file));
+  p->ref = 1;
   release(&ftable.lock);
-  return 0;
+  return p;
 }
 
 // Increment ref count for file f.
@@ -60,7 +59,6 @@ void
 fileclose(struct file *f)
 {
   struct file ff;
-
   acquire(&ftable.lock);
   if(f->ref < 1)
     panic("fileclose");
@@ -80,6 +78,8 @@ fileclose(struct file *f)
     iput(ff.ip);
     end_op(ff.ip->dev);
   }
+  
+  bd_free(f);
 }
 
 // Get metadata about file f.
diff --git a/kernel/param.h b/kernel/param.h
index 8e4ca98..eb2c034 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -12,3 +12,4 @@
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
 #define NDISK        2
+#define FILESIZE     48
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 9a0f827..7370813 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -69,6 +69,8 @@ int
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  if (*ip >= myproc()->sz)
+    return -1;
   return 0;
 }
 
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..b5b9ebd 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -47,8 +47,30 @@ sys_sbrk(void)
   if(argint(0, &n) < 0)
     return -1;
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+
+  // if (addr + n > MAXVA)
+  // {
+  //   return -1;
+  // }
+
+  if(n < 0){
+	myproc()->sz = uvmdealloc(myproc()->pagetable, myproc()->sz, myproc()->sz + n);
+		 return addr; 
+  }
+  else if ((myproc()->sz + n) > MAXVA) 
+  {
+	return -1;
+  }
+   myproc()->sz += n;
+
+/*
+  if (myproc()->sz > MAXVA || myproc()->sz < 0)
+  {
     return -1;
+  }
+*/
+
+  
   return addr;
 }
 
diff --git a/kernel/trap.c b/kernel/trap.c
index 51a7805..3654f93 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -68,11 +68,43 @@ usertrap(void)
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
-    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
-    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
-    p->killed = 1;
+    if (r_scause() == 13 || r_scause() == 15)
+    {
+      uint64 fault_va = r_stval();
+      uint64 round_fva = PGROUNDDOWN(fault_va);
+
+      if (fault_va >= p->sz || fault_va < PGROUNDUP(p->tf->sp))
+      {
+        p->killed = 1;
+        goto exit;
+      }
+
+      char *mem = kalloc();
+
+      if (mem == 0)
+      {
+        p->killed = 1;
+        goto exit;
+      }
+
+      memset(mem, 0, PGSIZE);
+
+      if(mappages(p->pagetable, round_fva, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0)
+      {
+        kfree(mem);
+        p->killed = 1;
+        goto exit;
+      }
+    }
+    else
+    {
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      p->killed = 1;
+    }
   }
 
+  exit:
   if(p->killed)
     exit(-1);
 
diff --git a/kernel/vm.c b/kernel/vm.c
index 2b99c8b..cf92d3f 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,7 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
-
+#include "spinlock.h"
+#include "proc.h"
 /*
  * the kernel's page table.
  */
@@ -161,7 +162,8 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
     if((pte = walk(pagetable, a, 1)) == 0)
       return -1;
     if(*pte & PTE_V)
-      panic("remap");
+       *pte=0;
+      //panic("remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
     if(a == last)
       break;
@@ -174,34 +176,50 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 // Remove mappings from a page table. The mappings in
 // the given range must exist. Optionally free the
 // physical memory.
-void
+	void
 uvmunmap(pagetable_t pagetable, uint64 va, uint64 size, int do_free)
 {
-  uint64 a, last;
-  pte_t *pte;
-  uint64 pa;
-
-  a = PGROUNDDOWN(va);
-  last = PGROUNDDOWN(va + size - 1);
-  for(;;){
-    if((pte = walk(pagetable, a, 0)) == 0)
-      panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0){
-      printf("va=%p pte=%p\n", a, *pte);
-      panic("uvmunmap: not mapped");
-    }
-    if(PTE_FLAGS(*pte) == PTE_V)
-      panic("uvmunmap: not a leaf");
-    if(do_free){
-      pa = PTE2PA(*pte);
-      kfree((void*)pa);
-    }
-    *pte = 0;
-    if(a == last)
-      break;
-    a += PGSIZE;
-    pa += PGSIZE;
-  }
+	uint64 a, last;
+	pte_t *pte;
+	uint64 pa;
+
+	a = PGROUNDDOWN(va);
+	last = PGROUNDDOWN(va + size - 1);
+	for(;;){
+		if((pte = walk(pagetable, a, 0)) == 0) {
+			if(pte!=0)
+				*pte = 0;
+		if(a == last)
+			break;
+		a += PGSIZE;
+		pa += PGSIZE;
+			continue;
+	}
+	// panic("uvmunmap: walk");
+	if((*pte & PTE_V) == 0){
+		if(pte!=0)
+			*pte = 0;
+		if(a == last)
+			break;
+		a += PGSIZE;
+		pa += PGSIZE;
+			continue;
+		// printf("va=%p pte=%p\n", a, *pte);
+		// panic("uvmunmap: not mapped");
+	}
+	if(PTE_FLAGS(*pte) == PTE_V)
+		panic("uvmunmap: not a leaf");
+	if(do_free){
+		pa = PTE2PA(*pte);
+		kfree((void*)pa);
+	}
+
+	*pte = 0;
+	if(a == last)
+		break;
+	a += PGSIZE;
+	pa += PGSIZE;
+}
 }
 
 // create an empty user page table.
@@ -288,7 +306,8 @@ freewalk(pagetable_t pagetable)
       freewalk((pagetable_t)child);
       pagetable[i] = 0;
     } else if(pte & PTE_V){
-      panic("freewalk: leaf");
+      //panic("freewalk: leaf");
+      pagetable[i] = 0;
     }
   }
   kfree((void*)pagetable);
@@ -319,9 +338,11 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
-      panic("uvmcopy: pte should exist");
+      continue;
+      //panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
+      continue;
+      //panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
@@ -348,7 +369,8 @@ uvmclear(pagetable_t pagetable, uint64 va)
   
   pte = walk(pagetable, va, 0);
   if(pte == 0)
-    panic("uvmclear");
+    return;
+   // panic("uvmclear");
   *pte &= ~PTE_U;
 }
 
@@ -363,11 +385,46 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   while(len > 0){
     va0 = (uint)PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
+
     if(pa0 == 0)
-      return -1;
+    {
+      struct proc* p = myproc();
+      uint64 round_fva = PGROUNDDOWN(va0);
+
+      if (va0 >= p->sz || va0 <= p->tf->sp || round_fva >= MAXVA)
+      {
+        return -1;
+      }
+
+      char* mem = kalloc();
+
+      if (mem == 0)
+      {
+        return -1;
+      }
+
+      memset(mem, 0, PGSIZE);
+
+      if(mappages(p->pagetable, round_fva, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0)
+      {
+        kfree(mem);
+        return -1;
+      }
+
+//      pa0 = (uint64) mem;
+pa0 = walkaddr(pagetable, va0);
+
+    }
+
     n = PGSIZE - (dstva - va0);
     if(n > len)
       n = len;
+
+    if (pa0 + (dstva - va0) > MAXVA || pa0 + (dstva - va0) < 0)
+    {
+      return -1;
+    }
+
     memmove((void *)(pa0 + (dstva - va0)), src, n);
 
     len -= n;
@@ -388,11 +445,45 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
   while(len > 0){
     va0 = (uint)PGROUNDDOWN(srcva);
     pa0 = walkaddr(pagetable, va0);
+
     if(pa0 == 0)
-      return -1;
+    {
+      struct proc* p = myproc();
+      uint64 round_fva = PGROUNDDOWN(va0);
+
+    //  if (va0 >= p->sz || va0 <= p->tf->sp || round_fva >= MAXVA)
+    //  {
+     //   return -1;
+     // }
+
+      char* mem = kalloc();
+
+      if (mem == 0)
+      {
+        return -1;
+      }
+
+      memset(mem, 0, PGSIZE);
+
+      if(mappages(p->pagetable, round_fva, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0)
+      {
+        kfree(mem);
+        return -1;
+      }
+
+      //pa0 = (uint64) mem;
+pa0 = walkaddr(pagetable, va0);
+    }
+
     n = PGSIZE - (srcva - va0);
     if(n > len)
       n = len;
+    
+    //if (pa0 + (srcva - va0) > MAXVA || pa0 + (srcva - va0) < 0)
+   // {
+    //  return -1;
+   // }
+
     memmove(dst, (void *)(pa0 + (srcva - va0)), n);
 
     len -= n;
@@ -415,12 +506,45 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
   while(got_null == 0 && max > 0){
     va0 = (uint)PGROUNDDOWN(srcva);
     pa0 = walkaddr(pagetable, va0);
+    
     if(pa0 == 0)
-      return -1;
+    {
+      struct proc* p = myproc();
+      uint64 round_fva = PGROUNDDOWN(va0);
+
+     // if (va0 >= p->sz || va0 <= p->tf->sp || round_fva >= MAXVA)
+    //  {
+      //  return -1;
+     // }
+
+      char* mem = kalloc();
+
+      if (mem == 0)
+      {
+        return -1;
+      }
+
+      memset(mem, 0, PGSIZE);
+
+      if(mappages(p->pagetable, round_fva, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0)
+      {
+        kfree(mem);
+        return -1;
+      }
+
+//      pa0 = (uint64) mem;
+pa0 = walkaddr(pagetable, va0);
+    }
+
     n = PGSIZE - (srcva - va0);
     if(n > max)
       n = max;
 
+    if (pa0 + (srcva - va0) > MAXVA || pa0 + (srcva - va0) < 0)
+    {
+      return -1;
+    }
+
     char *p = (char *) (pa0 + (srcva - va0));
     while(n > 0){
       if(*p == '\0'){
